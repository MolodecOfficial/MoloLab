import bcrypt from 'bcrypt';
import { User } from "~/server/models/user.model";
import express from 'express';

const app = express();
const port = 3000;

// Middleware для парсинга тела запроса
app.use(express.json());

// Маршрут для регистрации пользователя
app.post('/api/users', async (req, res) => {
 const { firstName, lastName, email, password } = req.body;
 // Проверяем, существует ли пользователь с таким же email
 const existingUser = await User.findOne({ email });
 if (existingUser) {
  res.status(400).json({ message: "Данный пользователь уже зарегистрирован" });
  return;
 }
 const hashedPassword = await bcrypt.hash(password, 10);
 const newUser = new User({ firstName, lastName, email, password: hashedPassword });
 try {
  await newUser.save();
  res.json({ message: "Пользователь успешно зарегистрирован" });
 } catch (error) {
  if (error.code === 11000) {
   res.status(400).json({ message: "Данный пользователь уже существует" });
  } else {
   res.status(500).json({ message: "Произошла ошибка при регистрации" });
  }
 }
});

// Маршрут для обработки ошибки при регистрации
app.use((err, req, res, next) => {
 const statusCode = err.statusCode || 500;
 const message = err.message || 'Internal Server Error';
 res.status(statusCode).json({ message });
});

app.listen(port, () => {
 console.log(`Сервер запущен на порту ${port}`);
});